import { Body, Delete, Get, Param, ParseUUIDPipe, Query, HttpStatus } from '@nestjs/common';
import { Auth } from '@/auth/decorators/auth.decorator';
import { AuthType } from '@/auth/enums/auth-type.enum';
import { UserRole } from '@/auth/enums/user-role.enum';
import { Controller, Post } from '@nestjs/common';
import { CurrentUser } from '@/auth/decorators/current-user.decorator';
import { CreateOrderDto } from '@/orders/dtos/create-order.dto';
import { OrderDto } from '@/orders/dtos/order.dto';
import { PaginationQueryDto } from '@/orders/dtos/pagination-query.dto';
import { PaginatedResponse } from '@/common/interfaces/paginated-response.interface';
import { PaginatedResponseDto } from '@/common/dtos/paginated-response.dto';
import { OrderDetailDto } from '@/orders/dtos/order-detail.dto';
import { QRCodeResponse } from '@/payments/interfaces/payment-provider.interfaces';
import { OrdersService } from '@/orders/services/orders.service';
import { 
  ValidationErrorResponseDto, 
  UnauthorizedErrorResponseDto, 
  NotFoundErrorResponseDto,
  ErrorResponseDto 
} from '@/common/dtos/api-response.dto';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiTags,
  ApiBadRequestResponse,
  ApiUnauthorizedResponse,
  ApiNotFoundResponse,
  ApiInternalServerErrorResponse,
  ApiForbiddenResponse,
  ApiExtraModels,
} from '@nestjs/swagger';

@ApiTags('üìã Orders')
@ApiExtraModels(OrderDto, CreateOrderDto, OrderDetailDto, PaginatedResponseDto, ValidationErrorResponseDto, UnauthorizedErrorResponseDto, NotFoundErrorResponseDto, ErrorResponseDto)
@ApiBearerAuth('Authorization')
@Controller('api/orders')
@Auth(AuthType.Bearer, UserRole.USER, UserRole.ADMIN)
export class OrdersController {
  constructor(private readonly ordersService: OrdersService) {}

  @Post()
  @ApiOperation({ 
    summary: 'T·∫°o ƒë∆°n h√†ng m·ªõi',
    description: `
      T·∫°o ƒë∆°n h√†ng m·ªõi t·ª´ gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng.
      
      **Quy tr√¨nh:**
      1. Ki·ªÉm tra gi·ªè h√†ng c√≥ s·∫£n ph·∫©m kh√¥ng
      2. X√°c nh·∫≠n t·ªìn kho ƒë·ªß cho t·∫•t c·∫£ s·∫£n ph·∫©m
      3. ƒê·∫∑t tr∆∞·ªõc t·ªìn kho (reserved stock)
      4. T·∫°o ƒë∆°n h√†ng v·ªõi tr·∫°ng th√°i PENDING
      5. X√≥a gi·ªè h√†ng sau khi t·∫°o ƒë∆°n th√†nh c√¥ng
      6. T·∫°o QR code n·∫øu ch·ªçn thanh to√°n SEPAY_QR
      
      **Ph∆∞∆°ng th·ª©c thanh to√°n:**
      - **COD:** Thanh to√°n khi nh·∫≠n h√†ng
      - **SEPAY_QR:** Thanh to√°n qua QR code (tr·∫£ v·ªÅ th√¥ng tin QR)
      
      **L∆∞u √Ω:** T·ªìn kho s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc trong 15 ph√∫t. N·∫øu kh√¥ng thanh to√°n, ƒë∆°n h√†ng s·∫Ω b·ªã h·ªßy t·ª± ƒë·ªông.
    `
  })
  @ApiCreatedResponse({ 
    description: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. C√≥ th·ªÉ k√®m th√¥ng tin QR code cho thanh to√°n.',
    schema: {
      type: 'object',
      properties: {
        order: { $ref: '#/components/schemas/OrderDto' },
        qrCode: { 
          type: 'object',
          properties: {
            qrCodeUrl: { type: 'string', example: 'https://qr.sepay.vn/img?acc=1234567890&bank=VCB&amount=15990000&des=DH650e8400' },
            amount: { type: 'number', example: 15990000 },
            accountNumber: { type: 'string', example: '1234567890' },
            accountName: { type: 'string', example: 'LAPTOP SHOP' },
            bankCode: { type: 'string', example: 'VCB' }
          }
        }
      },
      required: ['order']
    }
  })
  @ApiBadRequestResponse({ 
    description: 'Gi·ªè h√†ng tr·ªëng, ƒë·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá, ho·∫∑c kh√¥ng ƒë·ªß t·ªìn kho.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi t·∫°o ƒë∆°n h√†ng ho·∫∑c t·∫°o QR code.',
    type: ErrorResponseDto 
  })
  async createOrder(
    @CurrentUser('sub') userId: string,
    @Body() createOrderDto: CreateOrderDto,
  ): Promise<{ order: OrderDto; qrCode?: QRCodeResponse }> {
    return await this.ordersService.create(userId, createOrderDto);
  }

  @Get()
  @ApiOperation({ 
    summary: 'L·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng',
    description: `
      L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p.
      
      **T√≠nh nƒÉng:**
      - Ph√¢n trang v·ªõi page v√† limit
      - S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
      - Hi·ªÉn th·ªã th√¥ng tin t√≥m t·∫Øt c·ªßa t·ª´ng ƒë∆°n h√†ng
      
      **Th√¥ng tin bao g·ªìm:**
      - ID ƒë∆°n h√†ng v√† ng√†y ƒë·∫∑t
      - Tr·∫°ng th√°i ƒë∆°n h√†ng v√† thanh to√°n
      - T·ªïng ti·ªÅn v√† ph∆∞∆°ng th·ª©c thanh to√°n
      - ƒê·ªãa ch·ªâ giao h√†ng
      
      **Ph√¢n trang:** M·∫∑c ƒë·ªãnh 10 ƒë∆°n h√†ng/trang, t·ªëi ƒëa 50.
    `
  })
  @ApiOkResponse({ 
    description: 'Danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: PaginatedResponseDto<OrderDto>
  })
  @ApiBadRequestResponse({ 
    description: 'Tham s·ªë ph√¢n trang kh√¥ng h·ª£p l·ªá (page, limit).',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi truy xu·∫•t danh s√°ch ƒë∆°n h√†ng.',
    type: ErrorResponseDto 
  })
  @ApiQuery({ 
    name: 'page', 
    required: false, 
    description: 'Trang hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh 1)',
    example: 1,
    schema: { type: 'integer', minimum: 1 }
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    description: 'S·ªë ƒë∆°n h√†ng m·ªói trang (m·∫∑c ƒë·ªãnh 10, t·ªëi ƒëa 50)',
    example: 10,
    schema: { type: 'integer', minimum: 1, maximum: 50 }
  })
  async getUserOrders(
    @CurrentUser('sub') userId: string,
    @Query() query: PaginationQueryDto,
  ): Promise<PaginatedResponse<OrderDto> & { message: string }> {
    const result = await this.ordersService.findAll(userId, query);

    return {
      ...result,
      message: result.message,
    };
  }

  @Get(':orderId')
  @ApiOperation({ 
    summary: 'Chi ti·∫øt ƒë∆°n h√†ng',
    description: `
      L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë∆°n h√†ng c·ª• th·ªÉ.
      
      **Th√¥ng tin chi ti·∫øt bao g·ªìm:**
      - Th√¥ng tin ƒë∆°n h√†ng (ID, ng√†y, tr·∫°ng th√°i, t·ªïng ti·ªÅn)
      - Th√¥ng tin kh√°ch h√†ng (t√™n, email)
      - Danh s√°ch s·∫£n ph·∫©m v·ªõi s·ªë l∆∞·ª£ng v√† gi√°
      - ƒê·ªãa ch·ªâ giao h√†ng v√† ghi ch√∫
      - Ph∆∞∆°ng th·ª©c thanh to√°n v√† transaction ID
      - Timestamps (t·∫°o, c·∫≠p nh·∫≠t)
      
      **B·∫£o m·∫≠t:** Ch·ªâ ch·ªß ƒë∆°n h√†ng ho·∫∑c admin m·ªõi c√≥ th·ªÉ xem chi ti·∫øt.
    `
  })
  @ApiOkResponse({ 
    description: 'Th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: OrderDetailDto 
  })
  @ApiBadRequestResponse({ 
    description: 'Order ID kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng UUID.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiForbiddenResponse({ 
    description: 'Kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y (ch·ªâ ch·ªß ƒë∆°n h√†ng ho·∫∑c admin).',
    type: ErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi truy xu·∫•t th√¥ng tin ƒë∆°n h√†ng.',
    type: ErrorResponseDto 
  })
  @ApiParam({ 
    name: 'orderId', 
    description: 'ID c·ªßa ƒë∆°n h√†ng c·∫ßn xem chi ti·∫øt',
    example: '650e8400-e29b-41d4-a716-446655440003',
    format: 'uuid'
  })
  async getUserOrderById(
    @CurrentUser('sub') userId: string,
    @Param('orderId', ParseUUIDPipe) orderId: string,
  ): Promise<OrderDetailDto> {
    return await this.ordersService.findOne(userId, orderId);
  }

  @Get(':orderId/check-payment-status')
  @ApiOperation({ 
    summary: 'Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n',
    description: `
      Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n hi·ªán t·∫°i c·ªßa ƒë∆°n h√†ng.
      
      **S·ª≠ d·ª•ng khi:**
      - Ng∆∞·ªùi d√πng v·ª´a thanh to√°n qua QR code
      - Mu·ªën ki·ªÉm tra xem payment ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
      - Polling ƒë·ªÉ c·∫≠p nh·∫≠t UI real-time
      
      **Tr·∫°ng th√°i c√≥ th·ªÉ:**
      - PENDING: Ch∆∞a thanh to√°n
      - PAID: ƒê√£ thanh to√°n th√†nh c√¥ng  
      - FAILED: Thanh to√°n th·∫•t b·∫°i
      - CANCELLED: ƒê√£ h·ªßy thanh to√°n
      
      **L∆∞u √Ω:** Endpoint n√†y tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa ƒë∆°n h√†ng, kh√¥ng ch·ªâ tr·∫°ng th√°i thanh to√°n.
    `
  })
  @ApiOkResponse({ 
    description: 'Tr·∫°ng th√°i thanh to√°n v√† th√¥ng tin ƒë∆°n h√†ng hi·ªán t·∫°i.',
    type: OrderDetailDto 
  })
  @ApiBadRequestResponse({ 
    description: 'Order ID kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng UUID.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiForbiddenResponse({ 
    description: 'Kh√¥ng c√≥ quy·ªÅn ki·ªÉm tra ƒë∆°n h√†ng n√†y.',
    type: ErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n.',
    type: ErrorResponseDto 
  })
  @ApiParam({ 
    name: 'orderId', 
    description: 'ID c·ªßa ƒë∆°n h√†ng c·∫ßn ki·ªÉm tra tr·∫°ng th√°i thanh to√°n',
    example: '650e8400-e29b-41d4-a716-446655440003',
    format: 'uuid'
  })
  async checkPaymentStatus(
    @CurrentUser('sub') userId: string,
    @Param('orderId', ParseUUIDPipe) orderId: string,
  ): Promise<OrderDetailDto> {
    return await this.ordersService.findOne(userId, orderId);
  }

  @Delete(':orderId/cancel')
  @ApiOperation({ 
    summary: 'H·ªßy ƒë∆°n h√†ng',
    description: `
      H·ªßy ƒë∆°n h√†ng n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán.
      
      **ƒêi·ªÅu ki·ªán h·ªßy:**
      - ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i PENDING
      - Ch∆∞a thanh to√°n (paymentStatus = PENDING)
      - L√† ch·ªß ƒë∆°n h√†ng ho·∫∑c admin
      
      **Quy tr√¨nh:**
      1. Ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ªßy
      2. Ho√†n tr·∫£ t·ªìn kho (unreserve stock)
      3. C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh CANCELLED
      4. G·ª≠i email th√¥ng b√°o (n·∫øu c√≥)
      
      **L∆∞u √Ω:** Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ƒë√£ thanh to√°n ho·∫∑c ƒëang x·ª≠ l√Ω.
    `
  })
  @ApiOkResponse({ 
    description: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.',
    type: OrderDto 
  })
  @ApiBadRequestResponse({ 
    description: 'Order ID kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë∆°n h√†ng kh√¥ng th·ªÉ h·ªßy (ƒë√£ thanh to√°n/ƒëang x·ª≠ l√Ω).',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiForbiddenResponse({ 
    description: 'Kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y.',
    type: ErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi h·ªßy ƒë∆°n h√†ng.',
    type: ErrorResponseDto 
  })
  @ApiParam({ 
    name: 'orderId', 
    description: 'ID c·ªßa ƒë∆°n h√†ng c·∫ßn h·ªßy',
    example: '650e8400-e29b-41d4-a716-446655440003',
    format: 'uuid'
  })
  async cancelOrder(
    @CurrentUser('sub') userId: string,
    @Param('orderId', ParseUUIDPipe) orderId: string,
  ): Promise<OrderDto> {
    return await this.ordersService.cancel(userId, orderId);
  }
}
