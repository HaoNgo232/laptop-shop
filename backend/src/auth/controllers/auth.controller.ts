import { Auth } from '@/auth/decorators/auth.decorator';
import { LoginResponseDto } from '@/auth/dtos/login-response.dto';
import { LoginUserDto } from '@/auth/dtos/login.dto';
import { RefreshTokenDto } from '@/auth/dtos/refresh-token.dto';
import { RegisterUserDto } from '@/auth/dtos/register-user.dto';
import { UserResponseDto } from '@/auth/dtos/user-response.dto';
import { User } from '@/auth/entities/user.entity';
import { AuthType } from '@/auth/enums/auth-type.enum';
import { AuthService } from '@/auth/services/auth.service';
import { ValidationErrorResponseDto, UnauthorizedErrorResponseDto, ErrorResponseDto } from '@/common/dtos/api-response.dto';
import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiOperation,
  ApiTags,
  ApiUnauthorizedResponse,
  ApiInternalServerErrorResponse,
  ApiConflictResponse,
  ApiExtraModels,
} from '@nestjs/swagger';

@ApiTags('üîê Authentication')
@ApiExtraModels(LoginResponseDto, UserResponseDto, RegisterUserDto, LoginUserDto, RefreshTokenDto, ValidationErrorResponseDto, UnauthorizedErrorResponseDto, ErrorResponseDto)
@Controller('api/auth')
export class AuthController {
  constructor(
    /**
     * Service ƒë·ªÉ x·ª≠ l√Ω logic li√™n quan ƒë·∫øn x√°c th·ª±c.
     */
    private readonly authService: AuthService,
  ) {}

  /**
   * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi.
   */
  @Post('register')
  @HttpCode(HttpStatus.CREATED)
  @Auth(AuthType.None)
  @ApiOperation({ 
    summary: 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi',
    description: `
      T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi trong h·ªá th·ªëng.
      
      **Y√™u c·∫ßu:**
      - Email ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
      - Username ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
      - M·∫≠t kh·∫©u √≠t nh·∫•t 8 k√Ω t·ª±, c√≥ ch·ªØ v√† s·ªë
      - X√°c nh·∫≠n m·∫≠t kh·∫©u ph·∫£i kh·ªõp
      
      **Th√†nh c√¥ng:** Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng (kh√¥ng bao g·ªìm m·∫≠t kh·∫©u)
    `
  })
  @ApiCreatedResponse({ 
    description: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng. Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng.',
    type: UserResponseDto
  })
  @ApiBadRequestResponse({ 
    description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá - thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ho·∫∑c ƒë·ªãnh d·∫°ng sai.',
    type: ValidationErrorResponseDto
  })
  @ApiConflictResponse({ 
    description: 'Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.',
    type: ErrorResponseDto
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi t·∫°o t√†i kho·∫£n.',
    type: ErrorResponseDto
  })
  async register(@Body() registerUserDto: RegisterUserDto): Promise<Omit<User, 'passwordHash'>> {
    return this.authService.register(registerUserDto);
  }

  /**
   * ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng.
   */
  @Post('login')
  @HttpCode(HttpStatus.OK)
  @Auth(AuthType.None)
  @ApiOperation({
    summary: 'ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng',
    description: `
      X√°c th·ª±c ng∆∞·ªùi d√πng v√† c·∫•p ph√°t token truy c·∫≠p.
      
      **C√°ch s·ª≠ d·ª•ng:**
      1. G·ª≠i email v√† m·∫≠t kh·∫©u
      2. Nh·∫≠n access token (c√≥ th·ªùi h·∫°n 1 gi·ªù)
      3. Nh·∫≠n refresh token (c√≥ th·ªùi h·∫°n 7 ng√†y)
      4. S·ª≠ d·ª•ng access token trong header: Authorization: Bearer <token>
      
      **L∆∞u √Ω:** Access token c·∫ßn ƒë∆∞·ª£c l√†m m·ªõi b·∫±ng refresh token khi h·∫øt h·∫°n.
    `,
  })
  @ApiOkResponse({ 
    description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng. Tr·∫£ v·ªÅ access token, refresh token v√† th√¥ng tin ng∆∞·ªùi d√πng.',
    type: LoginResponseDto
  })
  @ApiBadRequestResponse({ 
    description: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u, ho·∫∑c ƒë·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá.',
    type: ValidationErrorResponseDto
  })
  @ApiUnauthorizedResponse({ 
    description: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.',
    type: UnauthorizedErrorResponseDto
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server trong qu√° tr√¨nh x√°c th·ª±c.',
    type: ErrorResponseDto
  })
  async login(@Body() loginUserDto: LoginUserDto): Promise<LoginResponseDto> {
    return this.authService.login(loginUserDto);
  }

  /**
   * L√†m m·ªõi access token b·∫±ng refresh token.
   */
  @Post('refresh-token')
  @HttpCode(HttpStatus.OK)
  @Auth(AuthType.None)
  @ApiOperation({
    summary: 'L√†m m·ªõi access token',
    description: `
      C·∫•p l·∫°i access token m·ªõi t·ª´ refresh token h·ª£p l·ªá.
      
      **Khi n√†o s·ª≠ d·ª•ng:**
      - Access token ƒë√£ h·∫øt h·∫°n (401 Unauthorized)
      - Mu·ªën gia h·∫°n phi√™n ƒëƒÉng nh·∫≠p
      
      **L∆∞u √Ω:** 
      - Refresh token c√≥ th·ªùi h·∫°n 7 ng√†y
      - Sau khi h·∫øt h·∫°n refresh token, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i
    `,
  })
  @ApiOkResponse({ 
    description: 'L√†m m·ªõi token th√†nh c√¥ng. Tr·∫£ v·ªÅ access token v√† refresh token m·ªõi.',
    type: LoginResponseDto
  })
  @ApiBadRequestResponse({ 
    description: 'Thi·∫øu refresh token ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá.',
    type: ValidationErrorResponseDto
  })
  @ApiUnauthorizedResponse({ 
    description: 'Refresh token kh√¥ng h·ª£p l·ªá, ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ b·ªã thu h·ªìi.',
    type: UnauthorizedErrorResponseDto
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi l√†m m·ªõi token.',
    type: ErrorResponseDto
  })
  async refreshToken(@Body() refreshTokenDto: RefreshTokenDto): Promise<LoginResponseDto> {
    return this.authService.refreshToken(refreshTokenDto);
  }
}
