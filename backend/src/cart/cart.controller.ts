import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  HttpStatus,
  HttpCode,
  ParseUUIDPipe,
} from '@nestjs/common';
import { Auth } from '@/auth/decorators/auth.decorator';
import { AuthType } from '@/auth/enums/auth-type.enum';
import { UserRole } from '@/auth/enums/user-role.enum';
import { CartDto } from '@/cart/dtos/cart.dto';
import { CartService } from '@/cart/cart.service';
import { CurrentUser } from '@/auth/decorators/current-user.decorator';
import { AddToCartDto } from '@/cart/dtos/add-to-cart.dto';
import { UpdateCartItemDto } from '@/cart/dtos/update-cart-item.dto';
import { 
  ValidationErrorResponseDto, 
  UnauthorizedErrorResponseDto, 
  NotFoundErrorResponseDto,
  ErrorResponseDto 
} from '@/common/dtos/api-response.dto';
import {
  ApiBearerAuth,
  ApiNoContentResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiTags,
  ApiBadRequestResponse,
  ApiUnauthorizedResponse,
  ApiNotFoundResponse,
  ApiInternalServerErrorResponse,
  ApiExtraModels,
} from '@nestjs/swagger';

@ApiTags('üõí Shopping Cart')
@ApiExtraModels(CartDto, AddToCartDto, UpdateCartItemDto, ValidationErrorResponseDto, UnauthorizedErrorResponseDto, NotFoundErrorResponseDto, ErrorResponseDto)
@ApiBearerAuth('Authorization')
@Controller('api/cart')
@Auth(AuthType.Bearer, UserRole.USER, UserRole.ADMIN)
export class CartController {
  constructor(private readonly cartService: CartService) {}

  /**
   * L·∫•y gi·ªè h√†ng c·ªßa user hi·ªán t·∫°i
   */
  @Get()
  @ApiOperation({ 
    summary: 'L·∫•y gi·ªè h√†ng hi·ªán t·∫°i',
    description: `
      L·∫•y th√¥ng tin gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p.
      
      **Bao g·ªìm:**
      - Danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè
      - Th√¥ng tin chi ti·∫øt t·ª´ng s·∫£n ph·∫©m (t√™n, gi√°, h√¨nh ·∫£nh)
      - S·ªë l∆∞·ª£ng t·ª´ng s·∫£n ph·∫©m
      - T·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng gi√° tr·ªã gi·ªè h√†ng
      
      **L∆∞u √Ω:** Gi√° hi·ªÉn th·ªã l√† gi√° khi th√™m v√†o gi·ªè, c√≥ th·ªÉ kh√°c gi√° hi·ªán t·∫°i.
    `
  })
  @ApiOkResponse({ 
    description: 'Th√¥ng tin gi·ªè h√†ng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: CartDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi truy xu·∫•t gi·ªè h√†ng.',
    type: ErrorResponseDto 
  })
  getCart(@CurrentUser('sub') userId: string): Promise<CartDto> {
    return this.cartService.findOne(userId);
  }

  /**
   * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
   */
  @Post('items')
  @ApiOperation({ 
    summary: 'Th√™m s·∫£n ph·∫©m v√†o gi·ªè',
    description: `
      Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng ho·∫∑c tƒÉng s·ªë l∆∞·ª£ng n·∫øu ƒë√£ c√≥.
      
      **Quy tr√¨nh:**
      1. Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i v√† ƒëang ho·∫°t ƒë·ªông
      2. Ki·ªÉm tra t·ªìn kho ƒë·ªß kh√¥ng
      3. N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè: c·ªông th√™m s·ªë l∆∞·ª£ng
      4. N·∫øu ch∆∞a c√≥: th√™m m·ªõi v·ªõi gi√° hi·ªán t·∫°i
      
      **Gi·ªõi h·∫°n:** T·ªëi ƒëa 100 s·∫£n ph·∫©m c√πng lo·∫°i trong gi·ªè.
    `
  })
  @ApiOkResponse({ 
    description: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng.',
    type: CartDto 
  })
  @ApiBadRequestResponse({ 
    description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (productId sai ƒë·ªãnh d·∫°ng, quantity kh√¥ng h·ª£p l·ªá) ho·∫∑c kh√¥ng ƒë·ªß t·ªìn kho.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi th√™m s·∫£n ph·∫©m v√†o gi·ªè.',
    type: ErrorResponseDto 
  })
  addItem(@CurrentUser('sub') userId: string, @Body() addItemDto: AddToCartDto): Promise<CartDto> {
    return this.cartService.addItem(userId, addItemDto.productId, addItemDto.quantity);
  }

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
   */
  @Put('items/:productId')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m',
    description: `
      C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ trong gi·ªè h√†ng.
      
      **Quy tr√¨nh:**
      1. Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng kh√¥ng
      2. Ki·ªÉm tra t·ªìn kho ƒë·ªß cho s·ªë l∆∞·ª£ng m·ªõi
      3. C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m·ªõi
      4. T√≠nh l·∫°i t·ªïng gi√° tr·ªã gi·ªè h√†ng
      
      **L∆∞u √Ω:** ƒê·ªÉ x√≥a s·∫£n ph·∫©m, s·ª≠ d·ª•ng endpoint DELETE thay v√¨ set quantity = 0.
    `
  })
  @ApiOkResponse({ 
    description: 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.',
    type: CartDto 
  })
  @ApiBadRequestResponse({ 
    description: 'ProductId kh√¥ng h·ª£p l·ªá, quantity kh√¥ng h·ª£p l·ªá, ho·∫∑c kh√¥ng ƒë·ªß t·ªìn kho.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi c·∫≠p nh·∫≠t gi·ªè h√†ng.',
    type: ErrorResponseDto 
  })
  @ApiParam({ 
    name: 'productId', 
    description: 'ID c·ªßa s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng',
    example: '550e8400-e29b-41d4-a716-446655440000',
    format: 'uuid'
  })
  updateItem(
    @CurrentUser('sub') userId: string,
    @Param('productId', ParseUUIDPipe) productId: string,
    @Body() updateItemDto: UpdateCartItemDto,
  ): Promise<CartDto> {
    return this.cartService.updateQuantity(userId, productId, updateItemDto.quantity);
  }

  /**
   * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
   */
  @Delete('items/:productId')
  @ApiOperation({ 
    summary: 'X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè',
    description: `
      X√≥a ho√†n to√†n m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.
      
      **Quy tr√¨nh:**
      1. Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng kh√¥ng
      2. X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
      3. T√≠nh l·∫°i t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng gi√° tr·ªã
      
      **K·∫øt qu·∫£:** Gi·ªè h√†ng sau khi ƒë√£ x√≥a s·∫£n ph·∫©m.
    `
  })
  @ApiOkResponse({ 
    description: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng th√†nh c√¥ng.',
    type: CartDto 
  })
  @ApiBadRequestResponse({ 
    description: 'ProductId kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng UUID.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè.',
    type: ErrorResponseDto 
  })
  @ApiParam({ 
    name: 'productId', 
    description: 'ID c·ªßa s·∫£n ph·∫©m c·∫ßn x√≥a kh·ªèi gi·ªè h√†ng',
    example: '550e8400-e29b-41d4-a716-446655440000',
    format: 'uuid'
  })
  removeItem(
    @CurrentUser('sub') userId: string,
    @Param('productId', ParseUUIDPipe) productId: string,
  ): Promise<CartDto> {
    return this.cartService.removeItem(userId, productId);
  }

  /**
   * X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
   */
  @Delete()
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({ 
    summary: 'X√≥a to√†n b·ªô gi·ªè h√†ng',
    description: `
      X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng.
      
      **S·ª≠ d·ª•ng khi:**
      - Ng∆∞·ªùi d√πng mu·ªën b·∫Øt ƒë·∫ßu mua s·∫Øm t·ª´ ƒë·∫ßu
      - Sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng (t·ª± ƒë·ªông)
      - H·ªßy b·ªè to√†n b·ªô gi·ªè h√†ng
      
      **K·∫øt qu·∫£:** Gi·ªè h√†ng tr·ªëng (totalItems = 0, totalPrice = 0).
    `
  })
  @ApiNoContentResponse({ 
    description: 'ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng.' 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi x√≥a gi·ªè h√†ng.',
    type: ErrorResponseDto 
  })
  clearCart(@CurrentUser('sub') userId: string): Promise<void> {
    return this.cartService.clear(userId);
  }
}
