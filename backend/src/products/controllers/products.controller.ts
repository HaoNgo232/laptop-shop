import { Controller, Get, Param, Query, ParseUUIDPipe } from '@nestjs/common';
import { ProductsService } from '@/products/services/products.service';
import { ProductDto } from '@/products/dtos/product.dto';
import { QueryProductDto } from '@/products/dtos/query-product.dto';
import { PaginatedResponse } from '@/common/interfaces/paginated-response.interface';
import { PaginatedResponseDto } from '@/common/dtos/paginated-response.dto';
import { ErrorResponseDto, NotFoundErrorResponseDto, ValidationErrorResponseDto } from '@/common/dtos/api-response.dto';
import { Auth } from '@/auth/decorators/auth.decorator';
import { AuthType } from '@/auth/enums/auth-type.enum';
import { 
  ApiOkResponse, 
  ApiOperation, 
  ApiParam, 
  ApiQuery, 
  ApiTags,
  ApiBadRequestResponse,
  ApiNotFoundResponse,
  ApiInternalServerErrorResponse,
  ApiExtraModels
} from '@nestjs/swagger';

@ApiTags('üõçÔ∏è Products')
@ApiExtraModels(PaginatedResponseDto, ProductDto, ValidationErrorResponseDto, NotFoundErrorResponseDto, ErrorResponseDto)
@Controller('api/products')
@Auth(AuthType.None)
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  @Get()
  @ApiOperation({
    summary: 'Danh s√°ch s·∫£n ph·∫©m',
    description: `
      L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi c√°c t√≠nh nƒÉng:
      
      **Ph√¢n trang:**
      - page: Trang hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh 1)
      - limit: S·ªë s·∫£n ph·∫©m m·ªói trang (m·∫∑c ƒë·ªãnh 12, t·ªëi ƒëa 100)
      
      **L·ªçc:**
      - categoryId: L·ªçc theo danh m·ª•c c·ª• th·ªÉ
      - priceMin/priceMax: L·ªçc theo kho·∫£ng gi√°
      - search: T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
      
      **S·∫Øp x·∫øp:**
      - sortBy: Tr∆∞·ªùng s·∫Øp x·∫øp (name, price, createdAt, averageRating, reviewCount)
      - sortOrder: Th·ª© t·ª± s·∫Øp x·∫øp (ASC, DESC)
      
      **K·∫øt qu·∫£:** Danh s√°ch s·∫£n ph·∫©m v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß bao g·ªìm ƒë√°nh gi√° v√† t·ªìn kho.
    `,
  })
  @ApiOkResponse({ 
    description: 'Danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: PaginatedResponseDto<ProductDto>
  })
  @ApiBadRequestResponse({ 
    description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá (page, limit, categoryId, gi√°, v.v.).',
    type: ValidationErrorResponseDto
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi truy xu·∫•t danh s√°ch s·∫£n ph·∫©m.',
    type: ErrorResponseDto
  })
  public findAll(@Query() query: QueryProductDto): Promise<PaginatedResponse<ProductDto>> {
    return this.productsService.findAll(query);
  }

  @Get('high-stock')
  @ApiOperation({
    summary: 'S·∫£n ph·∫©m t·ªìn kho cao',
    description: `
      L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng t·ªìn kho cao nh·∫•t.
      
      **·ª®ng d·ª•ng:**
      - Hi·ªÉn th·ªã s·∫£n ph·∫©m khuy·∫øn m√£i
      - T·ªëi ∆∞u h√≥a doanh s·ªë cho s·∫£n ph·∫©m t·ªìn kho
      - Ph√¢n t√≠ch v√† qu·∫£n l√Ω kho h√†ng
      
      **M·∫∑c ƒë·ªãnh:** Tr·∫£ v·ªÅ 8 s·∫£n ph·∫©m c√≥ t·ªìn kho cao nh·∫•t.
    `,
  })
  @ApiOkResponse({ 
    description: 'Danh s√°ch s·∫£n ph·∫©m t·ªìn kho cao ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: [ProductDto]
  })
  @ApiBadRequestResponse({ 
    description: 'Tham s·ªë limit kh√¥ng h·ª£p l·ªá.',
    type: ValidationErrorResponseDto
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    description: 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh 8, t·ªëi ƒëa 50)',
    example: 8,
    schema: { type: 'integer', minimum: 1, maximum: 50 }
  })
  public findHighStockProducts(@Query('limit') limit?: number): Promise<ProductDto[]> {
    return this.productsService.findHighStockProducts(limit);
  }

  @Get('best-selling')
  @ApiOperation({
    summary: 'S·∫£n ph·∫©m b√°n ch·∫°y',
    description: `
      L·∫•y danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t d·ª±a tr√™n s·ªë l∆∞·ª£ng ƒë√£ b√°n.
      
      **Ti√™u ch√≠:** S·∫£n ph·∫©m ƒë∆∞·ª£c s·∫Øp x·∫øp theo t·ªïng s·ªë l∆∞·ª£ng ƒë√£ b√°n gi·∫£m d·∫ßn.
      
      **·ª®ng d·ª•ng:**
      - Trang ch·ªß hi·ªÉn th·ªã s·∫£n ph·∫©m n·ªïi b·∫≠t
      - Khuy·∫øn ngh·ªã s·∫£n ph·∫©m cho kh√°ch h√†ng
      - Ph√¢n t√≠ch xu h∆∞·ªõng b√°n h√†ng
      
      **M·∫∑c ƒë·ªãnh:** Tr·∫£ v·ªÅ 8 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t.
    `,
  })
  @ApiOkResponse({ 
    description: 'Danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: [ProductDto]
  })
  @ApiBadRequestResponse({ 
    description: 'Tham s·ªë limit kh√¥ng h·ª£p l·ªá.',
    type: ValidationErrorResponseDto
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    description: 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh 8, t·ªëi ƒëa 50)',
    example: 8,
    schema: { type: 'integer', minimum: 1, maximum: 50 }
  })
  public findBestSellingProducts(@Query('limit') limit?: number): Promise<ProductDto[]> {
    return this.productsService.findBestSellingProducts(limit);
  }

  @Get(':id')
  @ApiOperation({ 
    summary: 'Chi ti·∫øt s·∫£n ph·∫©m',
    description: `
      L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.
      
      **Th√¥ng tin bao g·ªìm:**
      - Th√¥ng tin c∆° b·∫£n (t√™n, m√¥ t·∫£, gi√°, h√¨nh ·∫£nh)
      - Th√¥ng tin kho h√†ng (t·ªìn kho, s·ªë l∆∞·ª£ng ƒë·∫∑t tr∆∞·ªõc)
      - ƒê√°nh gi√° (ƒëi·ªÉm trung b√¨nh, s·ªë l∆∞·ª£ng ƒë√°nh gi√°)
      - Th√¥ng tin danh m·ª•c
      - Timestamps (t·∫°o, c·∫≠p nh·∫≠t)
      
      **L∆∞u √Ω:** Ch·ªâ tr·∫£ v·ªÅ s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông (active = true).
    `
  })
  @ApiOkResponse({ 
    description: 'Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng.',
    type: ProductDto
  })
  @ApiBadRequestResponse({ 
    description: 'ID s·∫£n ph·∫©m kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng UUID.',
    type: ValidationErrorResponseDto
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ƒë∆∞·ª£c cung c·∫•p ho·∫∑c s·∫£n ph·∫©m ƒë√£ b·ªã x√≥a.',
    type: NotFoundErrorResponseDto
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi truy xu·∫•t th√¥ng tin s·∫£n ph·∫©m.',
    type: ErrorResponseDto
  })
  @ApiParam({ 
    name: 'id', 
    description: 'ID c·ªßa s·∫£n ph·∫©m c·∫ßn xem chi ti·∫øt',
    example: '550e8400-e29b-41d4-a716-446655440000',
    format: 'uuid'
  })
  public findOne(@Param('id', ParseUUIDPipe) id: string): Promise<ProductDto> {
    return this.productsService.findOne(id);
  }
}
