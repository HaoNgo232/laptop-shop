import { Body, Controller, Get, Headers, HttpCode, HttpStatus, Param, Post, ParseUUIDPipe } from '@nestjs/common';
import { Auth } from '@/auth/decorators/auth.decorator';
import { AuthType } from '@/auth/enums/auth-type.enum';
import { PaymentsService } from '@/payments/payments.service';
import { CreatePaymentDto } from '@/payments/dtos/create-payment.dto';
import { SepayWebhookDto } from '@/payments/dtos/sepay-webhook.dto';
import { QRCodeResponse } from '@/payments/interfaces/payment-provider.interfaces';
import { WebhookResponse } from '@/payments/interfaces/webhook-response.interfaces';
import { PaymentMethodEnum } from '@/payments/enums/payments-method.enum';
import { 
  ValidationErrorResponseDto, 
  UnauthorizedErrorResponseDto, 
  NotFoundErrorResponseDto,
  ErrorResponseDto 
} from '@/common/dtos/api-response.dto';
import { 
  ApiBearerAuth, 
  ApiOkResponse, 
  ApiOperation, 
  ApiParam, 
  ApiTags,
  ApiBadRequestResponse,
  ApiUnauthorizedResponse,
  ApiNotFoundResponse,
  ApiInternalServerErrorResponse,
  ApiHeader,
  ApiExtraModels,
} from '@nestjs/swagger';

@ApiTags('üí≥ Payments')
@ApiExtraModels(CreatePaymentDto, SepayWebhookDto, ValidationErrorResponseDto, UnauthorizedErrorResponseDto, NotFoundErrorResponseDto, ErrorResponseDto)
@Controller('api/payment')
export class PaymentsController {
  constructor(private readonly paymentsService: PaymentsService) {}

  /**
   * Endpoint d√πng ƒë·ªÉ t·∫°o QR code cho thanh to√°n
   */
  @Post('create')
  @Auth(AuthType.Bearer)
  @ApiBearerAuth('Authorization')
  @ApiOperation({ 
    summary: 'T·∫°o QR code thanh to√°n',
    description: `
      T·∫°o QR code cho thanh to√°n ƒë∆°n h√†ng qua SePay.
      
      **Quy tr√¨nh:**
      1. X√°c th·ª±c ƒë∆°n h√†ng v√† s·ªë ti·ªÅn
      2. T·∫°o m√£ QR duy nh·∫•t v·ªõi m√¥ t·∫£ DH{orderId}
      3. Tr·∫£ v·ªÅ URL QR code v√† th√¥ng tin ng√¢n h√†ng
      4. QR code c√≥ th·ªùi h·∫°n (m·∫∑c ƒë·ªãnh 15 ph√∫t)
      
      **Th√¥ng tin QR bao g·ªìm:**
      - URL h√¨nh ·∫£nh QR code ƒë·ªÉ hi·ªÉn th·ªã
      - S·ªë t√†i kho·∫£n ng√¢n h√†ng nh·∫≠n ti·ªÅn
      - T√™n ch·ªß t√†i kho·∫£n
      - M√£ ng√¢n h√†ng (VCB, TCB, v.v.)
      - S·ªë ti·ªÅn c·∫ßn thanh to√°n
      
      **L∆∞u √Ω:** 
      - Ch·ªâ h·ªó tr·ª£ thanh to√°n SEPAY_QR
      - Rate limit: 2 requests/second
      - Webhook s·∫Ω ƒë∆∞·ª£c g·ªçi khi c√≥ giao d·ªãch
    `
  })
  @ApiOkResponse({ 
    description: 'QR code ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.',
    schema: {
      type: 'object',
      properties: {
        qrCodeUrl: { 
          type: 'string', 
          description: 'URL h√¨nh ·∫£nh QR code',
          example: 'https://qr.sepay.vn/img?acc=1234567890&bank=VCB&amount=15990000&des=DH650e8400&template=compact' 
        },
        amount: { 
          type: 'number', 
          description: 'S·ªë ti·ªÅn thanh to√°n (VND)',
          example: 15990000 
        },
        accountNumber: { 
          type: 'string', 
          description: 'S·ªë t√†i kho·∫£n ng√¢n h√†ng',
          example: '1234567890' 
        },
        accountName: { 
          type: 'string', 
          description: 'T√™n ch·ªß t√†i kho·∫£n',
          example: 'LAPTOP SHOP' 
        },
        bankCode: { 
          type: 'string', 
          description: 'M√£ ng√¢n h√†ng',
          example: 'VCB' 
        },
        description: { 
          type: 'string', 
          description: 'N·ªôi dung chuy·ªÉn kho·∫£n',
          example: 'DH650e8400' 
        },
        expireAt: { 
          type: 'string', 
          format: 'date-time',
          description: 'Th·ªùi gian h·∫øt h·∫°n QR code',
          example: '2025-08-27T11:45:00.000Z' 
        }
      }
    }
  })
  @ApiBadRequestResponse({ 
    description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (order ID, amount, payment method) ho·∫∑c ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói t·ª´ SePay API ho·∫∑c l·ªói server khi t·∫°o QR code.',
    type: ErrorResponseDto 
  })
  async createPayment(@Body() createPaymentDto: CreatePaymentDto): Promise<QRCodeResponse> {
    return await this.paymentsService.generateQRCode(createPaymentDto);
  }

  /**
   * Endpoint ch·ªâ d√πng ƒë·ªÉ nh·∫≠n webhook sepay
   * Webhook hi·ªán t·∫°i ch∆∞a b·∫Øn v·ªÅ signature do SEPAY_WEBHOOK_SECRET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh
   */
  @Post('webhook/sepay')
  @Auth(AuthType.None)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Webhook t·ª´ SePay',
    description: `
      Endpoint nh·∫≠n th√¥ng b√°o t·ª´ SePay khi c√≥ giao d·ªãch th√†nh c√¥ng.
      
      **Quy tr√¨nh:**
      1. SePay g·ª≠i POST request khi c√≥ giao d·ªãch
      2. H·ªá th·ªëng x√°c th·ª±c signature (n·∫øu c√≥ SEPAY_WEBHOOK_SECRET)
      3. Parse th√¥ng tin giao d·ªãch t·ª´ content
      4. T√¨m ƒë∆°n h√†ng d·ª±a tr√™n m√£ DH{orderId}
      5. C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n v√† ƒë∆°n h√†ng
      6. Chuy·ªÉn stock t·ª´ reserved sang sold
      7. G·ª≠i email x√°c nh·∫≠n (n·∫øu c√≥)
      
      **Format content:** "LAPTOP SHOP DH650e8400 15990000"
      
      **B·∫£o m·∫≠t:** 
      - Ki·ªÉm tra signature n·∫øu c√≥ SEPAY_WEBHOOK_SECRET
      - Validate s·ªë ti·ªÅn v√† th√¥ng tin ƒë∆°n h√†ng
      - Ch·ªëng duplicate processing
      
      **L∆∞u √Ω:** Endpoint n√†y kh√¥ng c·∫ßn authentication.
    `
  })
  @ApiOkResponse({ 
    description: 'Webhook ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        message: { type: 'string', example: 'Payment processed successfully' },
        orderId: { type: 'string', example: '650e8400-e29b-41d4-a716-446655440003' },
        transactionId: { type: 'string', example: '20250827123456' }
      }
    }
  })
  @ApiBadRequestResponse({ 
    description: 'D·ªØ li·ªáu webhook kh√¥ng h·ª£p l·ªá ho·∫∑c signature kh√¥ng kh·ªõp.',
    type: ValidationErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi x·ª≠ l√Ω webhook.',
    type: ErrorResponseDto 
  })
  @ApiHeader({
    name: 'x-sepay-signature',
    description: 'Signature ƒë·ªÉ x√°c th·ª±c webhook t·ª´ SePay',
    required: false,
    schema: { type: 'string', example: 'sha256=abc123...' }
  })
  async handleSepayWebhook(
    @Body() payload: SepayWebhookDto,
    @Headers('x-sepay-signature') signature?: string,
  ): Promise<WebhookResponse> {
    return await this.paymentsService.processWebhook(
      PaymentMethodEnum.SEPAY_QR,
      payload,
      signature,
    );
  }

  /**
   * Endpoint d√πng ƒë·ªÉ l·∫•y danh s√°ch c√°c ph∆∞∆°ng th·ª©c thanh to√°n
   */
  @Get('methods')
  @Auth(AuthType.None)
  @ApiOperation({ 
    summary: 'Danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n',
    description: `
      L·∫•y danh s√°ch t·∫•t c·∫£ ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c h·ªó tr·ª£.
      
      **Ph∆∞∆°ng th·ª©c hi·ªán t·∫°i:**
      - **COD:** Cash on Delivery (Thanh to√°n khi nh·∫≠n h√†ng)
      - **SEPAY_QR:** Thanh to√°n qua QR code SePay
      
      **Th√¥ng tin bao g·ªìm:**
      - M√£ ph∆∞∆°ng th·ª©c (enum)
      - T√™n hi·ªÉn th·ªã
      - M√¥ t·∫£ chi ti·∫øt
      - Tr·∫°ng th√°i kh·∫£ d·ª•ng
      
      **S·ª≠ d·ª•ng:** Hi·ªÉn th·ªã options cho ng∆∞·ªùi d√πng ch·ªçn khi ƒë·∫∑t h√†ng.
    `
  })
  @ApiOkResponse({ 
    description: 'Danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n kh·∫£ d·ª•ng.',
    schema: {
      type: 'object',
      properties: {
        methods: {
          type: 'array',
          items: {
            type: 'string',
            enum: ['COD', 'SEPAY_QR']
          },
          example: ['COD', 'SEPAY_QR']
        }
      }
    }
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi l·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n.',
    type: ErrorResponseDto 
  })
  getPaymentMethods(): { methods: PaymentMethodEnum[] } {
    return {
      methods: this.paymentsService.getAvailableMethods(),
    };
  }

  /**
   * Endpoint d√πng ƒë·ªÉ chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n
   */
  @Post('switch/:orderId')
  @Auth(AuthType.Bearer)
  @ApiBearerAuth('Authorization')
  @ApiOperation({ 
    summary: 'Chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n',
    description: `
      Thay ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n c·ªßa ƒë∆°n h√†ng (ch·ªâ khi ch∆∞a thanh to√°n).
      
      **Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng:**
      - ƒê·∫∑t h√†ng v·ªõi COD nh∆∞ng mu·ªën chuy·ªÉn sang QR
      - QR code h·∫øt h·∫°n, t·∫°o QR m·ªõi
      - ƒê·ªïi t·ª´ QR sang COD v√¨ l√Ω do c√° nh√¢n
      
      **ƒêi·ªÅu ki·ªán:**
      - ƒê∆°n h√†ng ƒëang ·ªü tr·∫°ng th√°i PENDING
      - Payment status = PENDING (ch∆∞a thanh to√°n)
      - L√† ch·ªß ƒë∆°n h√†ng ho·∫∑c admin
      
      **Quy tr√¨nh:**
      1. X√°c th·ª±c ƒë∆°n h√†ng v√† quy·ªÅn
      2. C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n
      3. T·∫°o QR m·ªõi n·∫øu chuy·ªÉn sang SEPAY_QR
      4. Tr·∫£ v·ªÅ th√¥ng tin QR (n·∫øu c√≥)
      
      **L∆∞u √Ω:** Ch·ªâ c√≥ th·ªÉ chuy·ªÉn ƒë·ªïi trong th·ªùi gian gi·ªõi h·∫°n.
    `
  })
  @ApiOkResponse({ 
    description: 'Ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng.',
    schema: {
      oneOf: [
        {
          type: 'object',
          description: 'Response when switching to QR payment',
          properties: {
            qrCodeUrl: { type: 'string' },
            amount: { type: 'number' },
            accountNumber: { type: 'string' },
            accountName: { type: 'string' },
            bankCode: { type: 'string' }
          }
        },
        {
          type: 'object',
          description: 'Response when switching to COD',
          properties: {
            success: { type: 'boolean', example: true },
            message: { type: 'string', example: 'Switched to COD successfully' }
          }
        }
      ]
    }
  })
  @ApiBadRequestResponse({ 
    description: 'Order ID kh√¥ng h·ª£p l·ªá, ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, ho·∫∑c ƒë∆°n h√†ng kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi.',
    type: ValidationErrorResponseDto 
  })
  @ApiUnauthorizedResponse({ 
    description: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá.',
    type: UnauthorizedErrorResponseDto 
  })
  @ApiNotFoundResponse({ 
    description: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID ƒë∆∞·ª£c cung c·∫•p.',
    type: NotFoundErrorResponseDto 
  })
  @ApiInternalServerErrorResponse({ 
    description: 'L·ªói server khi chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n.',
    type: ErrorResponseDto 
  })
  @ApiParam({ 
    name: 'orderId', 
    description: 'ID c·ªßa ƒë∆°n h√†ng c·∫ßn chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n',
    example: '650e8400-e29b-41d4-a716-446655440003',
    format: 'uuid'
  })
  async switchPaymentMethod(
    @Param('orderId', ParseUUIDPipe) orderId: string,
    @Body()
    body: {
      amount: number;
      fromMethod: PaymentMethodEnum;
      toMethod: PaymentMethodEnum;
    },
  ): Promise<QRCodeResponse> {
    return await this.paymentsService.switchMethod(
      orderId,
      body.amount,
      body.fromMethod,
      body.toMethod,
    );
  }
}